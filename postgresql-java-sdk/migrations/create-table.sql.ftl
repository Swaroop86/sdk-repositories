<#-- Table Creation Migration Template -->
-- Migration: Create ${tableName} table
-- Generated by MCP PostgreSQL SDK

CREATE TABLE ${tableName} (
<#list fields as field>
    ${field.columnName} ${field.type}<#if field.length??>(${field.length})</#if><#if !field.nullable> NOT NULL</#if><#if field.defaultValue??> DEFAULT ${field.defaultValue}</#if><#if field_has_next>,</#if>
</#list>
<#if hasAuditFields>
    ,created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ,updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ,created_by VARCHAR(100)
    ,updated_by VARCHAR(100)
    ,version BIGINT DEFAULT 0
</#if>
<#if hasSoftDelete>
    ,deleted BOOLEAN DEFAULT FALSE
    ,deleted_at TIMESTAMP
</#if>
);

<#-- Primary key -->
<#list fields as field>
<#if field.primaryKey>
ALTER TABLE ${tableName} ADD CONSTRAINT pk_${tableName} PRIMARY KEY (${field.columnName});
</#if>
</#list>

<#-- Unique constraints -->
<#list fields as field>
<#if field.unique && !field.primaryKey>
ALTER TABLE ${tableName} ADD CONSTRAINT uk_${tableName}_${field.columnName} UNIQUE (${field.columnName});
</#if>
</#list>

<#-- Foreign keys -->
<#list fields as field>
<#if field.foreignKey??>
ALTER TABLE ${tableName} ADD CONSTRAINT fk_${tableName}_${field.columnName} 
    FOREIGN KEY (${field.columnName}) REFERENCES ${field.foreignKey.table}(${field.foreignKey.column})
    ON DELETE ${field.foreignKey.onDelete} ON UPDATE ${field.foreignKey.onUpdate};
</#if>
</#list>

<#-- Create updated_at trigger -->
<#if hasAuditFields>
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_${tableName}_updated_at 
    BEFORE UPDATE ON ${tableName} 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
</#if>