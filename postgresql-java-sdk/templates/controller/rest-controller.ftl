<#-- REST Controller Template -->
package ${package.controller};

import ${package.entity}.${entityClass};
import ${package.service}.${serviceName};
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.util.List;

/**
 * REST Controller for ${entityClass}
 * Generated by MCP PostgreSQL SDK
 */
@RestController
@RequestMapping("${apiPath}")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class ${controllerName} {
    
    private final ${serviceName} service;
    
    @PostMapping
    public ResponseEntity<${entityClass}> create(@Valid @RequestBody ${entityClass} entity) {
        log.info("Creating new ${entityClass}");
        ${entityClass} created = service.create(entity);
        return new ResponseEntity<>(created, HttpStatus.CREATED);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<${entityClass}> getById(@PathVariable ${primaryKeyType} id) {
        log.info("Getting ${entityClass} by id: {}", id);
        return service.findById(id)
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
    }
    
    @GetMapping
    public ResponseEntity<List<${entityClass}>> getAll() {
        log.info("Getting all ${entityClass} entities");
        List<${entityClass}> entities = service.findAll();
        return ResponseEntity.ok(entities);
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<${entityClass}> update(@PathVariable ${primaryKeyType} id, 
                                                 @Valid @RequestBody ${entityClass} entity) {
        log.info("Updating ${entityClass} with id: {}", id);
        if (!service.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        ${entityClass} updated = service.update(id, entity);
        return ResponseEntity.ok(updated);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable ${primaryKeyType} id) {
        log.info("Deleting ${entityClass} with id: {}", id);
        if (!service.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        service.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}