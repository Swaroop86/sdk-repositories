<#-- Soft Delete Entity Template -->
package ${package.entity};

import jakarta.persistence.*;
<#if validation>
import jakarta.validation.constraints.*;
</#if>
<#if lombok>
import lombok.*;
</#if>
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;
<#list imports as import>
import ${import};
</#list>
import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * Entity with soft delete capability for ${tableName} table
 * Generated by MCP PostgreSQL SDK
 */
@Entity
@Table(name = "${tableName}")
@SQLDelete(sql = "UPDATE ${tableName} SET deleted = true, deleted_at = CURRENT_TIMESTAMP WHERE id = ?")
@Where(clause = "deleted = false")
<#if lombok>
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
</#if>
public class ${className} implements Serializable {

    private static final long serialVersionUID = 1L;

<#list fields as field>
    <#if field.primaryKey>
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    </#if>
    @Column(name = "${field.columnName}"<#if !field.nullable>, nullable = false</#if>)
    private ${field.type} ${field.name};
    
</#list>

    // Soft delete fields
    @Column(name = "deleted")
    @Builder.Default
    private Boolean deleted = false;
    
    @Column(name = "deleted_at")
    private LocalDateTime deletedAt;

<#if !lombok>
    // Getters and setters...
</#if>
}