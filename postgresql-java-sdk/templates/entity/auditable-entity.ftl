<#-- Auditable Entity Template with Audit Fields -->
<#-- Location: sdk-repositories/postgresql-java-sdk/templates/entity/auditable-entity.ftl -->
package ${package.entity};

import jakarta.persistence.*;
<#if validation>
import jakarta.validation.constraints.*;
</#if>
<#if lombok>
import lombok.*;
</#if>
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
<#list imports as import>
import ${import};
</#list>
import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * Auditable entity class for ${tableName} table
 * Includes automatic audit fields for tracking changes
 * Generated by MCP PostgreSQL SDK
 * @author ${author!"MCP Generator"}
 * @since ${date}
 */
@Entity
@Table(name = "${tableName}"<#if schema??>, schema = "${schema}"</#if>)
@EntityListeners(AuditingEntityListener.class)
<#if lombok>
@Getter
@Setter
@ToString(exclude = {"createdBy", "lastModifiedBy"})
@NoArgsConstructor
@AllArgsConstructor
@Builder
</#if>
<#if equalHashCode>
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
</#if>
public class ${className} implements Serializable {

    private static final long serialVersionUID = 1L;

<#-- Primary Key and Fields -->
<#list fields as field>
    <#if field.primaryKey>
    @Id
    <#if field.generationType??>
    @GeneratedValue(strategy = GenerationType.${field.generationType})
    </#if>
    <#if equalHashCode>
    @EqualsAndHashCode.Include
    </#if>
    </#if>
    
    @Column(name = "${field.columnName}"<#if !field.nullable>, nullable = false</#if><#if field.unique>, unique = true</#if><#if field.length??>, length = ${field.length}</#if>)
    <#if validation && !field.primaryKey && !field.nullable>
    @NotNull(message = "${field.name} is required")
    </#if>
    <#if validation && field.type == "String" && field.length??>
    @Size(max = ${field.length}, message = "${field.name} must not exceed ${field.length} characters")
    </#if>
    private ${field.type} ${field.name};

</#list>

    // Audit fields
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @CreatedBy
    @Column(name = "created_by", length = 100, updatable = false)
    private String createdBy;

    @LastModifiedBy
    @Column(name = "updated_by", length = 100)
    private String lastModifiedBy;

    @Version
    @Column(name = "version")
    private Long version;

<#-- Relationships -->
<#if relationships??>
<#list relationships as rel>
    <#if rel.type == "OneToMany">
    @OneToMany(mappedBy = "${rel.mappedBy}", cascade = CascadeType.${rel.cascade!"ALL"}, fetch = FetchType.${rel.fetch!"LAZY"})
    private ${rel.collectionType!"List"}<${rel.targetEntity}> ${rel.fieldName};
    </#if>
    
    <#if rel.type == "ManyToOne">
    @ManyToOne(fetch = FetchType.${rel.fetch!"LAZY"})
    @JoinColumn(name = "${rel.joinColumn}")
    private ${rel.targetEntity} ${rel.fieldName};
    </#if>
</#list>
</#if>

<#if !lombok>
    // Constructors
    public ${className}() {
        // Default constructor
    }

    // Getters and Setters
    <#list fields as field>
    public ${field.type} get${field.name?cap_first}() {
        return ${field.name};
    }

    public void set${field.name?cap_first}(${field.type} ${field.name}) {
        this.${field.name} = ${field.name};
    }

    </#list>
    
    // Audit field getters and setters
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    public String getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    public String getLastModifiedBy() {
        return lastModifiedBy;
    }

    public void setLastModifiedBy(String lastModifiedBy) {
        this.lastModifiedBy = lastModifiedBy;
    }

    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }
</#if>

    /**
     * Check if entity is new (not persisted)
     */
    public boolean isNew() {
        return createdAt == null;
    }
}