<#-- Transactional Service Template -->
package ${package.service};

import ${package.entity}.${entityClass};
import ${package.repository}.${repositoryName};
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;

/**
 * Transactional Service for ${entityClass}
 * Generated by MCP PostgreSQL SDK
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ${serviceName} {
    
    private final ${repositoryName} repository;
    
    @Transactional
    public ${entityClass} create(${entityClass} entity) {
        log.debug("Creating ${entityClass}: {}", entity);
        return repository.save(entity);
    }
    
    @Transactional(readOnly = true)
    public Optional<${entityClass}> findById(${primaryKeyType} id) {
        return repository.findById(id);
    }
    
    @Transactional
    public ${entityClass} update(${primaryKeyType} id, ${entityClass} entity) {
        log.debug("Updating ${entityClass} with id: {}", id);
        return repository.save(entity);
    }
    
    @Transactional
    public void deleteById(${primaryKeyType} id) {
        log.debug("Deleting ${entityClass} with id: {}", id);
        repository.deleteById(id);
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void deleteInNewTransaction(${primaryKeyType} id) {
        repository.deleteById(id);
    }
}